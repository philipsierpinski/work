group_by(Cut, County) %>%
summarise(n = n()) %>%
spread(Cut, n, fill = 0)
counties6 <- ass_sum %>%
right_join(counties, by = c("County" = "LnNamn"))
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `1`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `2`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `3`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `4`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `5`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
#Easter egg if you read all the way here
counties3 <- assortment_wide %>%
mutate(County = str_replace(County, " län", "")) %>%
group_by(County) %>%
summarise(`Vodka och Brännvin` = mean(`Vodka och Brännvin`)) %>%
right_join(counties, by = c("County" = "LnNamn"))
ggplot(counties3) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `Vodka och Brännvin`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
counties4 <- assortment_wide %>%
mutate(County = str_replace(County, " län", "")) %>%
group_by(County) %>%
summarise(`Rött vin` = mean(`Rött vin`)) %>%
right_join(counties, by = c("County" = "LnNamn"))
ggplot(counties4) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `Rött vin`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
library(ggrepel)
#Converting to proportions using mutate_if
assortment_wide <- assortment %>%
spread(Product, Number, fill = 0) %>%
mutate(Total = rowSums(.[4:21]))  %>%
mutate_if(is.numeric, funs(. / Total)) %>%
select(-Total)
#Calculating the U-matrix
x <- assortment_wide %>%
select(-Store, -County, -City) %>%
mutate_all(scale)
s_v_d <- x %>% svd()
U <- as_data_frame(s_v_d$u)
colnames(U) <- paste("U", as.character(1:length(U)), sep="")
#Adding the cut as a column
assortment_wide_w_U <- assortment_wide %>%
bind_cols(assortment_wide, U[, 1:2])
#Identifying the outliers, using ifelse and an arbitrary criteria to only label the outliers
assortment_wide_w_U %>%
ggplot(aes(x = U1, y = U2, color = County))  +
geom_point() +
geom_text_repel(aes(label = ifelse(U1 + U2 > 0.5, Store, '')))
library(ggrepel)
#Converting to proportions using mutate_if
assortment_wide <- assortment %>%
spread(Product, Number, fill = 0) %>%
mutate(Total = rowSums(.[4:21]))  %>%
mutate_if(is.numeric, funs(. / Total)) %>%
select(-Total)
#Calculating the U-matrix
x <- assortment_wide %>%
select(-Store, -County, -City) %>%
mutate_all(scale)
s_v_d <- x %>% svd()
U <- as_data_frame(s_v_d$u)
colnames(U) <- paste("U", as.character(1:length(U)), sep="")
#Adding the cut as a column
assortment_wide_w_U <- assortment_wide %>%
bind_cols(assortment_wide, U[, 1:2])
#Identifying the outliers, using ifelse and an arbitrary criteria to only label the outliers
assortment_wide_w_U %>%
ggplot(aes(x = U1, y = U2, color = County))  +
geom_point() +
geom_text_repel(aes(label = ifelse(U1 + U2 > 0.5, Store, '')))
View(assortment_wide_w_U)
View(assortment_wide_w_U)
#Forming the transpose of X
x_t <- assortment_wide %>%
select(-Store, -County, -City) %>%
mutate_if(is.numeric, funs(scale(.))) %>%
t()
#Single value decomposing X^{T} and clustering and cutting, just as with X
s_v_d_t <- x_t %>% svd()
U_t <- as_data_frame(s_v_d_t$u)
colnames(U_t) <- paste("Ut", as.character(1:length(U_t)), sep="")
rownames(U_t) <- rownames(x_t)
assortment_clusters_t <- U_t %>%
select(Ut1, Ut2) %>%
dist() %>%
hclust()
#Can't use the previous dataframe bcs col-lengths, thus must form U_t_w_C
plot(assortment_clusters_t)
Cut_t <- cutree(assortment_clusters_t, 4)
U_t_w_C <- bind_cols(U_t, Cut = cutree(assortment_clusters_t, 4))
#Finding the appropriate names of the y-factors, under the assumption that svd does not change the order
y_names <- assortment_wide %>%
select(-Store, -County, -City) %>%
colnames()
y_names
y_order_w_cut <- bind_cols(y = y_names, Cut = Cut_t) %>%
arrange(Cut)
y_order_w_cut
#Plotting with labels and coloring after the groupings
U_t %>% mutate(names = y_names) %>%
ggplot(aes(x = Ut1, y = Ut2, color = factor(Cut_t), label = names))  +
geom_point() +
scale_color_viridis(option = "E", discrete = T, end = 0.9) +
geom_text_repel()
View(assortment_long_w_U)
View(assortment_long_w_U)
View(assortment_wide)
#Doing the clustering using dist() and hclust()
assortment_clusters <- assortment_wide_w_U %>%
select(U1, U2) %>%
dist() %>%
hclust()
plot(assortment_clusters)
#Forming the cut
assortment_clusters_cut <- cutree(assortment_clusters, 5)
#Adding the cut as a factor to the data frame
assortment_wide_w_U <- cbind(assortment_wide_w_U, Cut = factor(assortment_clusters_cut))
#Plotting the clusters, coloring by the grouping, it agrees well with the visual clustering
assortment_wide_w_U %>%
ggplot(aes(x = U1, y = U2, color = Cut)) +
geom_point() +
geom_text_repel(aes(label = ifelse(U1 + U2 > 0.5, paste(Store, City), '')))
View(assortment_wide_w_U)
View(assortment_wide_w_U)
assortmenttest <- assortment_wide_w_U %>%
select(Whisky, clusters, Store, county, City)
assortmenttest <- assortment_wide_w_U %>%
select(Whisky, Cut, Store, county, City)
assortmenttest <- assortment_wide_w_U %>%
select(Whisky, Cut, Store, County, City)
View(assortmenttest)
assortmenttest <- assortment_wide_w_U %>%
select(Whisky, Cut, Store, County, City) %>%
mutate_all(scale)
assortmenttest <- assortment_wide_w_U %>%
select(Whisky, Cut, Store, County, City) %>%
mutate_if(is.numeric, scale)
View(assortmenttest)
assortmenttest <- assortment_wide_w_U %>%
select(Whisky, Cut, Store, County, City) %>%
mutate_if(is.numeric, scale) %>%
gather(Whisky, key = Product, value = scaled_proportion)
View(assortmenttest)
glimpse(assortment_wide_w_U)
View(assortment_long_w_U)
assortmenttest <- assortment_wide_w_U %>%
select(Whisky, Cut, Store, County, City) %>%
mutate_if(is.numeric, scale) %>%
gather(Whisky, key = Product, value = scaled_proportion)
View(assortmenttest)
View(assortmenttest)
assortmenttest <- assortment_wide_w_U %>%
select(Whisky, Cut, Store, County, City) %>%
mutate_if(is.numeric, scale) %>%
gather(Whisky, key = Product, value = scaled_proportion)
View(assortmenttest)
y_order_w_cut$y
y_order_w_cut$y
#Need forcats to order the axes in the heatmap
library(forcats)
assortment_long_w_U <- assortment_wide_w_U %>%
select(`Akvavit och Kryddat brännvin`:Whisky, Cut, Store, County, City) %>%
mutate_if(is.numeric, scale) %>%
gather(`Akvavit och Kryddat brännvin`:Whisky, key = Product, value = scaled_proportion)
assortment_long_w_U
#Note that the y_order_w_cut matrix from above is used to set the labels and cluster the beverages
#geom_tile is used to form the heat map
#I can interpret the clustering of the beverages somewhat, all wines ends up in the same cluster
#Now that we have scaled each set of proportion by variable and chosen a diveregent palette
#we can see at least four of the clusters clearly.
assortment_long_w_U %>%
ggplot(aes(x = fct_inorder(Store, Cut),
y = factor(Product, levels = y_order_w_cut$y),
fill = scaled_proportion)) +
geom_tile() +
scale_y_discrete(labels = paste(y_order_w_cut$y,
as.character(y_order_w_cut$Cut),
sep = ' kluster ')) +
scale_fill_gradient2() +
theme(axis.text.x=element_blank())
#We can facet wrap for additional clarity. We see clearly that clusters 1, 2, 3 of the stores has a
#higher porportion of wines and a smaller proportion of clusters 2 and 3 of the beverages.
assortment_long_w_U %>%
ggplot(aes(x = fct_inorder(Store, Cut),
y = factor(Product, levels = y_order_w_cut$y),
fill = scaled_proportion)) +
geom_tile() +
scale_y_discrete(labels = paste(y_order_w_cut$y,
as.character(y_order_w_cut$Cut),
sep = ' kluster ')) +
facet_wrap(~Cut, scales = 'free_x') +
scale_fill_gradient2() +
theme(axis.text.x=element_blank())
#They seemed to have been somewhat grouped by where in the country they sell
ass_sum <- assortment_wide_w_U %>%
select(County, Cut) %>%
group_by(Cut, County) %>%
summarise(n = n()) %>%
spread(Cut, n, fill = 0)
counties6 <- ass_sum %>%
right_join(counties, by = c("County" = "LnNamn"))
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `1`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `2`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `3`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `4`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `5`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
y_order_w_cut
#Note that the y_order_w_cut matrix from above is used to set the labels and cluster the beverages
#geom_tile is used to form the heat map
#I can interpret the clustering of the beverages somewhat, all wines ends up in the same cluster
#Now that we have scaled each set of proportion by variable and chosen a diveregent palette
#we can see at least four of the clusters clearly.
assortment_long_w_U
y_order_w_cut$y
y_order_w_cut$y
#Need forcats to order the axes in the heatmap
library(forcats)
assortment_long_w_U <- assortment_wide_w_U %>%
select(`Akvavit och Kryddat brännvin`:Whisky, Cut, Store, County, City) %>%
mutate_if(is.numeric, scale) %>%
gather(`Akvavit och Kryddat brännvin`:Whisky, key = Product, value = scaled_proportion)
assortment_long_w_U
#Note that the y_order_w_cut matrix from above is used to set the labels and cluster the beverages
#geom_tile is used to form the heat map
#I can interpret the clustering of the beverages somewhat, all wines ends up in the same cluster
#Now that we have scaled each set of proportion by variable and chosen a diveregent palette
#we can see at least four of the clusters clearly.
assortment_long_w_U
assortment_long_w_U %>%
ggplot(aes(x = fct_inorder(Store, Cut),
y = factor(Product, levels = y_order_w_cut$y),
fill = scaled_proportion)) +
geom_tile() +
scale_y_discrete(labels = paste(y_order_w_cut$y,
as.character(y_order_w_cut$Cut),
sep = ' kluster ')) +
scale_fill_gradient2() +
theme(axis.text.x=element_blank())
#We can facet wrap for additional clarity. We see clearly that clusters 1, 2, 3 of the stores has a
#higher porportion of wines and a smaller proportion of clusters 2 and 3 of the beverages.
assortment_long_w_U %>%
ggplot(aes(x = fct_inorder(Store, Cut),
y = factor(Product, levels = y_order_w_cut$y),
fill = scaled_proportion)) +
geom_tile() +
scale_y_discrete(labels = paste(y_order_w_cut$y,
as.character(y_order_w_cut$Cut),
sep = ' kluster ')) +
facet_wrap(~Cut, scales = 'free_x') +
scale_fill_gradient2() +
theme(axis.text.x=element_blank())
#They seemed to have been somewhat grouped by where in the country they sell
ass_sum <- assortment_wide_w_U %>%
select(County, Cut) %>%
group_by(Cut, County) %>%
summarise(n = n()) %>%
spread(Cut, n, fill = 0)
counties6 <- ass_sum %>%
right_join(counties, by = c("County" = "LnNamn"))
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `1`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `2`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `3`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `4`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
ggplot(counties6) +
geom_polygon(aes(x = long, y = lat, group = group, fill = `5`)) +
coord_fixed() +
scale_fill_viridis(option = "D", begin = 0.1, end = 0.9) +
theme_bw()
knitr::opts_chunk$set(echo = TRUE)
cluster_groups_tran <- cutree(clusters_tran, 5)
knitr::opts_chunk$set(echo = TRUE)
library(RSQLite)
library(DBI)
library(tidyverse)
library(dbplyr)
library(plyr)
#my query for the database.
my_db <- DBI::dbConnect(RSQLite::SQLite(), "../HW_data/system.sqlite")
dbListTables(my_db) #checking tables in my_db
stock <- dbGetQuery(my_db, "SELECT * FROM stock") #to view the data
store <- dbGetQuery(my_db, "SELECT * FROM store") #to view the data
#my query for butik_ombud in SQL
butik_ombud <- dbGetQuery(my_db, "SELECT Address5 AS county, COUNT(Address5) AS Number, Typ AS Type
FROM store
GROUP BY Address5,Typ"
)
glimpse(butik_ombud)
#my query for assortment in SQL
assortment <- dbGetQuery(my_db, "SELECT Nr AS Store, Address5 AS county, Address4 as City, stock.Varugrupp AS Product, stock.AntalProdukter
FROM store JOIN stock
ON store.Nr = stock.ButikNr")
type_ombud<- butik_ombud%>%
filter(Type=="Ombud")
type_butik<- butik_ombud%>%
filter(Type=="Butik")%>%
left_join(type_ombud, by="county")%>%
mutate(Antal_Butiker = Number.x, Antal_Ombud = Number.y)%>%
select(county,Antal_Butiker,Antal_Ombud)%>%
mutate(county = as.factor(county))%>%
mutate(Ratio = Antal_Butiker / Antal_Ombud)
levels(type_butik$county) <- c("Blekinge", "Dalarnas", "Gotlands", "G?vleborgs", "Hallands", "J?mtlands", "J?nk?pings", "Kalmar", "Kronobergs", "Norrbottens", "Sk?ne", "Stockholms", "S?dermanlands", "Uppsala", "V?rmlands", "V?sterbottens", "V?sternorrlands", "V?stmanlands","V?stra G?talands", "?rebro", "?sterg?tlands")
counties <- read_csv("../HW_data/counties.csv")
counties<-counties %>%
mutate(county = as.factor(LnNamn))%>%
select(-LnNamn)%>%
left_join(type_butik, by="county")
ggplot(counties) + geom_polygon(aes(x = long, y = lat, group = group, fill = Ratio)) +
coord_fixed() +
theme_bw()
assortment_wide <- assortment %>%
group_by(Store)%>%
mutate_if(is.numeric, funs(. / sum(AntalProdukter))) %>%
spread(key = Product,value = AntalProdukter)
assortment_wide[is.na(assortment_wide)] <- 0 #replace NA's med 0
x<-assortment_wide[,4:21]%>%
mutate_all(scale)
SVD <- svd(x)
u <- SVD$u
colnames(u) <- paste0("col" ,c(1:ncol(u)))
u<- as.data.frame(u)
decomp <- assortment_wide %>%
bind_cols(assortment_wide, u[, 1:2])
decomp_graph_cols <- ggplot(data=decomp, aes(col1,col2))  +
geom_point()
decomp_graph_cols
decomp_identify <- decomp %>%
filter(col1 >= 0.1 & col2>=0.3) ##identifierar stores
clusters <- decomp %>%
ungroup(Store) %>%
select(col1, col2) %>%
dist() %>%
hclust()
plot(clusters)
clusters_grouping <- cutree(clusters, 6) ##cutindelning
assortment2 <- cbind(decomp, ClusterGroup = factor(clusters_grouping))
ggplot(data=assortment2,aes(col1,col2, color = ClusterGroup)) +
geom_point()
x_tran <- t(x)
SVD_tran <- svd(x_tran)
u_tran <- SVD_tran$u
u_tran <- as.data.frame(u_tran)
clusters_tran <- u_tran %>%
select(V1, V2) %>%
dist() %>%
hclust()
plot(clusters_tran)
clusters_grouping_tran <- cutree(clusters_tran, 6) ##cutindelning
clusters_grouping_tran
cluster_groups_tran <- cutree(clusters_tran, 5)
col_names <- colnames(assortment_wide[4:21])
decomp <- decomp %>%
mutate(clusterss = clusters_grouping)
type_and_clusters <- decomp %>%
select(col_names,Store) %>%
gather(col_names, key = Product, value = scaled_proportion) %>%
mutate(andel = scale(scaled_proportion), Product = factor(Product), Product = reorder(Product, cluster_groups_tran))
type_and_clusters_graph <- type_and_clusters %>%
ggplot(aes(x = Store, y = Product)) + geom_tile(aes(fill = scaled_proportion)) + scale_fill_gradient2() + xlab("")
type_and_clusters_graph
clusters_grouping_tran
cluster_groups_tran <- cutree(clusters_tran, 5)
cluster_groups_tran
clusters_grouping_tran
assortment_clusters_t <- U_t %>%
select(Ut1, Ut2) %>%
dist() %>%
hclust()
#Can't use the previous dataframe bcs col-lengths, thus must form U_t_w_C
plot(assortment_clusters_t)
Cut_t <- cutree(assortment_clusters_t, 4)
Cut_t
#Note that the y_order_w_cut matrix from above is used to set the labels and cluster the beverages
#geom_tile is used to form the heat map
#I can interpret the clustering of the beverages somewhat, all wines ends up in the same cluster
#Now that we have scaled each set of proportion by variable and chosen a diveregent palette
#we can see at least four of the clusters clearly.
assortment_long_w_U
Cut_t
assortment_long_w_U
assortment_long_w_U %>%
ggplot(aes(x = fct_inorder(Store, Cut),
y = factor(Product, levels = y_order_w_cut$y),
fill = scaled_proportion)) +
geom_tile()
y_order_w_cut$y
assortment_long_w_U %>%
ggplot(aes(x = fct_inorder(Store, Cut),
y = factor(Product, levels = y_order_w_cut$y),
fill = scaled_proportion)) +
geom_tile() +
scale_y_discrete(labels = paste(y_order_w_cut$y,
as.character(y_order_w_cut$Cut),
sep = ' kluster ')) +
scale_fill_gradient2() +
theme(axis.text.x=element_blank())
#Note that the y_order_w_cut matrix from above is used to set the labels and cluster the beverages
#geom_tile is used to form the heat map
#I can interpret the clustering of the beverages somewhat, all wines ends up in the same cluster
#Now that we have scaled each set of proportion by variable and chosen a diveregent palette
#we can see at least four of the clusters clearly.
assortment_long_w_U
y_order_w_cut
#Note that the y_order_w_cut matrix from above is used to set the labels and cluster the beverages
#geom_tile is used to form the heat map
#I can interpret the clustering of the beverages somewhat, all wines ends up in the same cluster
#Now that we have scaled each set of proportion by variable and chosen a diveregent palette
#we can see at least four of the clusters clearly.
assortment_long_w_U
y_order_w_cut$y
#Need forcats to order the axes in the heatmap
library(forcats)
assortment_long_w_U <- assortment_wide_w_U %>%
select(`Akvavit och Kryddat brännvin`:Whisky, Cut, Store, County, City) %>%
mutate_if(is.numeric, scale) %>%
gather(`Akvavit och Kryddat brännvin`:Whisky, key = Product, value = scaled_proportion)
assortment_long_w_U
#Note that the y_order_w_cut matrix from above is used to set the labels and cluster the beverages
#geom_tile is used to form the heat map
#I can interpret the clustering of the beverages somewhat, all wines ends up in the same cluster
#Now that we have scaled each set of proportion by variable and chosen a diveregent palette
#we can see at least four of the clusters clearly.
assortment_long_w_U
assortment_long_w_U %>%
ggplot(aes(x = fct_inorder(Store, Cut),
y = factor(Product, levels = y_order_w_cut$y),
fill = scaled_proportion)) +
geom_tile() +
scale_y_discrete(labels = paste(y_order_w_cut$y,
as.character(y_order_w_cut$Cut),
sep = ' kluster ')) +
scale_fill_gradient2() +
theme(axis.text.x=element_blank())
#We can facet wrap for additional clarity. We see clearly that clusters 1, 2, 3 of the stores has a
#higher porportion of wines and a smaller proportion of clusters 2 and 3 of the beverages.
assortment_long_w_U %>%
ggplot(aes(x = fct_inorder(Store, Cut),
y = factor(Product, levels = y_order_w_cut$y),
fill = scaled_proportion)) +
geom_tile() +
scale_y_discrete(labels = paste(y_order_w_cut$y,
as.character(y_order_w_cut$Cut),
sep = ' kluster ')) +
facet_wrap(~Cut, scales = 'free_x') +
scale_fill_gradient2() +
theme(axis.text.x=element_blank())
#They seemed to have been somewhat grouped by where in the country they sell
ass_sum <- assortment_wide_w_U %>%
select(County, Cut) %>%
group_by(Cut, County) %>%
summarise(n = n()) %>%
spread(Cut, n, fill = 0)
